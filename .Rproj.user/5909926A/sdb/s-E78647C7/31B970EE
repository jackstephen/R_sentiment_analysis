{
    "contents" : "# 同一分支‘#’相似度：e=0.5\n#  同一分支相似度：1\n# 第一层分支，相似度：sim(A,B)=f=0.1\n# 第二层分支，相似度：sim(a,b)= 1*a*cos(n*(pi/180))*((n-k+1)/n)  :  a=0.65\n# 第三层分支，相似度：sim(a,b)= 1*b*cos(n*(pi/180))*((n-k+1)/n)  :  b=0.8\n# 第四层分支，相似度：sim(a,b)= 1*c*cos(n*(pi/180))*((n-k+1)/n)  :  c=0.9\n# 第五层分支，相似度：sim(a,b)= 1*d*cos(n*(pi/180))*((n-k+1)/n)  :  d=0.96\n\n#基于哈工大同义词词林扩展版计算词之间相关性\n#1 导入词林\n#2 解析词林\n# 2.1 编码，符号，词提取，保存为codes, symbols, hwords\n# 2.2 拆分词串为单独各词，存入 words <- c()\n# 2.3 数据存list(列表) dict\n#3 词搜索，返回编码及符号\n#4 计算词相似度\n# 4.1 比较分叉层，确定各层系数c(0.1,0.65,0.8,0.9,0.96,1,0.5),\n#     如果符号为’@’，相似度为0\n#     其它如果在同一叶子节点符号为“=”，系数为1,符号为'#'，系数为0.5\n#     其它相应层分叉对应相应系数：c(0.1,0.65,0.8,0.9,0.96,1,0.5)\n# 4.2 计算相似度并，并返回两词相似度最大值\n# Modified by stephen at 2015/7/31 增加未登陆词处理\n\n\nwordSimilarity <- function(w1,w2){\n  #搜索对应词对应编码\n  world1 <- paseList(getCode(w1))\n  world2 <- paseList(getCode(w2))\n  if(any(is.null(world1),is.null(world2))){\n    print(paste('ERROR:找不到词',w1,'或',w2))\n    return(NULL)\n  }\n  #计算词相似度\n  print\n  wsim <- vector()\n  for(i in world1){\n    for(j in world2){\n      wsim <- c(wsim,calSim(i,j))\n    }\n  }\n  return(max(wsim))\n# return((wsim))\n}\n\n#####################\n#字典初始化\n#####################\n#导入词林\ndictInit <- function(){\n  hdict <<- read.table(file='E:\\\\stephen\\\\dict\\\\hdict.txt',\n                      comment.char = \"|\",sep = '|',stringsAsFactors=FALSE)\n  #解析词林\n  dictList <<- paseWord(hdict)\n}\n#计算两个词相似度\n#初始化\ndictInit()\nw1 <- '车胎'\nw2 <- '方向盘'\nwordSimilarity(w1,w2)\n\n",
    "created" : 1440135911758.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2907943242",
    "id" : "31B970EE",
    "lastKnownWriteTime" : 1439191576,
    "path" : "D:/GitHub/R_sentiment_analysis/words_sim_base_on_ql.R",
    "project_path" : "words_sim_base_on_ql.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}